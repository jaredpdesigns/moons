---
layout: root.webc
---

<header>
  <section class="flow__flex flow__align--block-center flow__align--inline-between flow__gap--m">
    <button class="button__tertiary" onclick="toggleDialog()">
      <image-get-svg src="icons/ui/calendar.svg" webc:nokeep></image-get-svg>
    </button>
    <p>
      <strong
        @text="`${new Date().toLocaleDateString('en-US', { month: 'long' })}, ${new Date().getFullYear()}`"></strong>
    </p>
    <button class="button__tertiary" onclick="toggleTheme()">
      <image-get-svg src="icons/ui/moon.svg" webc:nokeep></image-get-svg>
      <image-get-svg src="icons/ui/sun.svg" webc:nokeep></image-get-svg>
    </button>
  </section>
</header>
<main :class="pageClass || page.fileSlug">
  <span class="color__bg--contrast flow__inline padding__s radius__xxxl">
    <button class="button__tertiary" onclick="prevDay()" tabindex="-1">
      <image-get-svg src="icons/ui/arrow-left.svg" webc:nokeep></image-get-svg>
    </button>
  </span>
  <article>
    <template @html="content" webc:nokeep></template>
  </article>
  <span class="color__bg--contrast flow__inline padding__s radius__xxxl">
    <button class="button__tertiary" onclick="nextDay()" tabindex="-1">
      <image-get-svg src="icons/ui/arrow-right.svg" webc:nokeep></image-get-svg>
    </button>
  </span>
</main>
<footer class="flow__grid">
  <section class="flow__grid flow__gap--xs" webc:for="(group, index) of moonData.moonGroups">
    <p class="type__size--xs-xs" @text="group.name"></p>
    <div class="flow__flex flow__gap--xs" @html="(() => {
        const isLastGroup = index === moonData.moonGroups.length - 1;
        const totaldays = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate();
        const days = isLastGroup && totaldays === 31 ? [...group.phaseDays, 31] : group.phaseDays;
        return days.map(day => `<span data-phase-day='${day}' class='phase-day radius__xs ${Number(day) <= Number(new Date().getDate()) ? 'color__bg--base--mid' : 'color__bg--base--light'}'></span>`).join('');
      })()"></div>
  </section>
</footer>
<dialog id="calendar">
  <div class="border__all color__border--base--light color__bg--contrast margin__block--l radius__m shadow">
    <header class="flow__flex flow__align--block-center flow__align--inline-between">
      <p><strong
          @text="`${new Date().toLocaleDateString('en-US', { month: 'long' })}, ${new Date().getFullYear()}`"></strong>
      </p>
      <button class="button__tertiary" onclick="toggleDialog()"><image-get-svg src="icons/ui/cancel.svg"
          webc:nokeep></image-get-svg></button>
    </header>
    <section>
      <p webc:for="weekday of ['S', 'M', 'T', 'W', 'T', 'F', 'S']" class="type__size--xs-xs--fluid"><strong
          @text="weekday"></strong></p>
      <button webc:for="(data,index) of moonData.monthCalendar"
        :class="`${new Date().getDate() === data.day ? 'color__bg--base--light' : 'color__bg--contrast'}${data.isOverlap ? ' overlap' : ''} flow__grid flow__align--block-center flow__align--inline-center padding__block--xs radius__xs`"
        :onclick="!data.isOverlap ? `selectDay(${data.day})` : null" :disabled="data.isOverlap">
        <p @text="data.day" class="type__size--xs-xs--fluid"></p>
        <image-get-svg :src="`icons/moons/${data.phase.day}.svg`" webc:nokeep></image-get-svg>
      </button>
    </section>
  </div>
</dialog>
<script>
  const getTheme = (fn) => {
    if (!window.matchMedia) {
      return;
    }

    const query = window.matchMedia('(prefers-color-scheme: dark)');

    fn(query.matches);

    query.addEventListener('change', (event) => fn(event.matches));
  }

  function toggleTheme() {
    if (sessionStorage.getItem("theme") === null) {
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        sessionStorage.setItem("theme", "dark");
      } else {
        sessionStorage.setItem("theme", "light");
      }
      document.documentElement.setAttribute(
        "data-theme",
        sessionStorage.getItem("theme")
      );
    }
    if (document.documentElement.getAttribute("data-theme") === "dark") {
      sessionStorage.setItem("theme", "light");
    } else {
      sessionStorage.setItem("theme", "dark");
    }
    document.documentElement.setAttribute(
      "data-theme",
      sessionStorage.getItem("theme")
    );
  }

  function toggleDialog() {
    const calendar = document.getElementById('calendar');
    const dialogIsOpen = calendar.hasAttribute("open");

    if (dialogIsOpen) {
      closeDialog();
    } else {
      openDialog();
    }
  }

  function openDialog() {
    const calendar = document.getElementById('calendar');
    calendar.showModal();
    document.body.style.overflow = "hidden";

    /* Add event listeners for enhanced dialog functionality */
    document.addEventListener('keydown', handleDialogKeydown);
    calendar.addEventListener('click', handleDialogBackdropClick);
  }

  function closeDialog() {
    const calendar = document.getElementById('calendar');
    calendar.close();
    document.body.removeAttribute("style");

    /* Remove event listeners when dialog closes */
    document.removeEventListener('keydown', handleDialogKeydown);
    calendar.removeEventListener('click', handleDialogBackdropClick);
  }

  function handleDialogKeydown(event) {
    /* Close dialog on Escape key */
    if (event.key === 'Escape') {
      closeDialog();
    }
  }

  function handleDialogBackdropClick(event) {
    const calendar = document.getElementById('calendar');

    /*
     * When clicking the backdrop, the event target is the dialog element itself
     * When clicking inside, the target is a child element
     */
    if (event.target === calendar) {
      closeDialog();
    }
  }

  function getCheckedIndex() {
    const allInputs = [...document.querySelectorAll('input')];
    const checked = document.querySelector('input:checked');
    const index = Number(checked.getAttribute('id'));

    // Removing whichever input is checked by default
    checked.removeAttribute('checked');

    return {
      allInputs,
      index
    };
  }

  /*
   * Update phases component to reflect the currently selected day
   */
  function updatePhases() {
    const checked = document.querySelector('input:checked');
    if (!checked) return;

    const currentDay = Number(checked.getAttribute('id'));
    const phaseSpans = document.querySelectorAll('.phase-day');

    phaseSpans.forEach(span => {
      const phaseDay = Number(span.getAttribute('data-phase-day'));
      if (phaseDay <= currentDay) {
        span.classList.add('color__bg--base--mid');
        span.classList.remove('color__bg--base--light');
      } else {
        span.classList.remove('color__bg--base--mid');
        span.classList.add('color__bg--base--light');
      }
    });
  }

  function nextDay() {
    const { allInputs, index } = getCheckedIndex();
    /*
     * If we're at the last day of the month, go to first day
     * Otherwise, go to the next day
     */
    const itemToCheck = index === allInputs.length ? allInputs[0] : allInputs[index];
    itemToCheck.setAttribute('checked', true);
    updatePhases();
  }

  function prevDay() {
    const { allInputs, index } = getCheckedIndex();
    /*
     * If we're at the first day of the month, go to last day
     * Otherwise, go to the previous day
     */
    const itemToCheck = index === 1 ? allInputs[allInputs.length - 1] : allInputs[index - 2];
    itemToCheck.setAttribute('checked', true);
    updatePhases();
  }

  function selectDay(day) {
    /*
     * Select a specific day by day number
     * Remove checked attribute from current selection
     * Add checked attribute to the selected day
     * Close the calendar dialog
     */
    const currentChecked = document.querySelector('input:checked');
    if (currentChecked) {
      currentChecked.removeAttribute('checked');
    }

    const dayInput = document.getElementById(day.toString());
    if (dayInput) {
      dayInput.setAttribute('checked', true);
      dayInput.checked = true;
    }

    closeDialog();
    updatePhases();
  }

  /*
   * Keyboard navigation for arrow keys
   */
  document.addEventListener('keydown', (event) => {
    const calendar = document.getElementById('calendar');
    const dialogIsOpen = calendar && calendar.hasAttribute("open");

    /*
     * Only handle arrow keys when dialog is not open
     */
    if (dialogIsOpen) return;

    switch (event.key) {
      case 'ArrowLeft':
        event.preventDefault();
        prevDay();
        break;
      case 'ArrowRight':
        event.preventDefault();
        nextDay();
        break;
    }
  });

  /*
   * Swipe gesture handling for touch devices
   */
  let touchStart = { x: 0, y: 0 };
  const minSwipeDistance = 50;

  document.addEventListener('touchstart', (event) => {
    const calendar = document.getElementById('calendar');
    const dialogIsOpen = calendar && calendar.hasAttribute("open");

    /*
     * Only track swipes when dialog is not open and not touching the dialog
     */
    if (!dialogIsOpen && !event.target.closest('#calendar')) {
      touchStart.x = event.changedTouches[0].screenX;
      touchStart.y = event.changedTouches[0].screenY;
    }
  });

  document.addEventListener('touchend', (event) => {
    const calendar = document.getElementById('calendar');
    const dialogIsOpen = calendar && calendar.hasAttribute("open");

    /*
     * Only handle swipes when dialog is not open and not touching the dialog
     */
    if (!dialogIsOpen && !event.target.closest('#calendar')) {
      const touchEnd = {
        x: event.changedTouches[0].screenX,
        y: event.changedTouches[0].screenY
      };

      const deltaX = touchEnd.x - touchStart.x;
      const deltaY = touchEnd.y - touchStart.y;

      /*
       * Check if horizontal swipe is more significant than vertical
       */
      if (
        Math.abs(deltaX) > Math.abs(deltaY) &&
        Math.abs(deltaX) > minSwipeDistance
      ) {
        deltaX > 0 ? prevDay() : nextDay();
      }
    }
  });

  getTheme((isDark) => {
    document.documentElement.setAttribute(
      "data-theme",
      sessionStorage.getItem("theme") ? sessionStorage.getItem("theme") : (isDark ? 'dark' : 'light')
    )
  })
</script>